### model development tutorial
# version: "3"

# services:
#   postgres-server:
#     image: postgres:14.0
#     container_name: postgres-server
#     ports:
#       - 5432:5432
#     environment:
#       POSTGRES_USER: myuser
#       POSTGRES_PASSWORD: mypassword
#       POSTGRES_DB: mydatabase
#     healthcheck:
#       test: ["CMD", "pg_isready", "-q", "-U", "myuser", "-d", "mydatabase"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   data-generator:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     platform: linux/amd64
#     container_name: data-generator
#     depends_on:
#       postgres-server:
#         condition: service_healthy
#     command: ["postgres-server"]

# networks:
#   default:
#     name: mlops-network


### backend store tutorial
# version: "3"

# services:
#   mlflow-backend-store:
#     image: postgres:14.0
#     container_name: mlflow-backend-store
#     ports:
#       - 5432:5432
#     environment:
#       POSTGRES_USER: mlflowuser
#       POSTGRES_PASSWORD: mlflowpassword
#       POSTGRES_DB: mlflowdatabase
#     healthcheck:
#       test: ["CMD", "pg_isready", "-q", "-U", "mlflowuser", "-d", "mlflowdatabase"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   mlflow-artifact-store:
#     image: minio/minio
#     container_name: mlflow-artifact-store
#     ports:
#       - 9000:9000
#       - 9001:9001
#     environment:
#       MINIO_ROOT_USER: minio
#       MINIO_ROOT_PASSWORD: miniostorage
#     command: server /data/minio --console-address :9001
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#       interval: 30s
#       timeout: 20s
#       retries: 3

#   mlflow-server:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     platform: linux/amd64
#     container_name: mlflow-server
#     depends_on:
#       mlflow-backend-store:
#         condition: service_healthy
#       mlflow-artifact-store:
#         condition: service_healthy
#     ports:
#       - 5001:5000
#     environment:
#       AWS_ACCESS_KEY_ID: minio
#       AWS_SECRET_ACCESS_KEY: miniostorage
#       MLFLOW_S3_ENDPOINT_URL: http://mlflow-artifact-store:9000
#     command:
#       - /bin/sh
#       - -c
#       - |
#         mc config host add mlflowminio http://mlflow-artifact-store:9000 minio miniostorage &&
#         mc mb --ignore-existing mlflowminio/mlflow
#         mlflow server \
#         --backend-store-uri postgresql://mlflowuser:mlflowpassword@mlflow-backend-store/mlflowdatabase \
#         --default-artifact-root s3://mlflow/ \
#         --host 0.0.0.0

### API Serving tutorial
version: "3"

services:
  api-with-model:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: api-with-model
    ports:
      - 8000:8000
    healthcheck:
      test:
        - CMD
        - curl -X POST http://localhost:8000/predict
        - -H
        - "Content-Type: application/json"
        - -d
        - '{"sepal_length": 6.7, "sepal_width": 3.3, "petal_length": 5.7, "petal_width": 2.1}'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  default:
    name: mlops-network
    external: true